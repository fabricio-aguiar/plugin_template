# TODO: Plugin writer action required
# This templated file must be adjusted to the plugins special dietary needs.

from pulpcore.client.pulpcore import (
    ApiClient as CoreApiClient,
    ArtifactsApi,
    Configuration,
    TasksApi,
)

from pulpcore.client.{{ plugin_snake }} import (
    ApiClient as {{ plugin_camel_short }}ApiClient,
    Content{{ plugin_camel_short }}Api,
    {{ plugin_camel_short }}{{ plugin_camel_short }}Content,
    Distributions{{ plugin_camel_short }}Api,
    {{ plugin_camel_short }}{{ plugin_camel_short }}Distribution,
    Publications{{ plugin_camel_short }}Api,
    Remotes{{ plugin_camel_short }}Api,
    {{ plugin_camel_short }}{{ plugin_camel_short }}Remote,
    RepositorySyncURL,
    {{ plugin_camel_short }}{{ plugin_camel_short }}Publication,
    Repositories{{ plugin_camel_short }}VersionsApi,
    Repositories{{ plugin_camel_short }}Api,
    {{ plugin_camel_short }}{{ plugin_camel_short }}Repository,
)
from pprint import pprint
from time import sleep
import os


def monitor_task(task_href):
    """Polls the Task API until the task is in a completed state.

    Prints the task details and a success or failure message. Exits on failure.

    Args:
        task_href(str): The href of the task to monitor

    Returns:
        list[str]: List of hrefs that identify resource created by the task

    """
    completed = ["completed", "failed", "canceled"]
    task = tasks.read(task_href)
    while task.state not in completed:
        sleep(2)
        task = tasks.read(task_href)
    pprint(task)
    if task.state == "completed":
        print("The task was successfful.")
        return task.created_resources
    else:
        print("The task did not finish successfully.")
        exit()


# Configure HTTP basic authorization: basic
configuration = Configuration()
configuration.username = "admin"
configuration.password = "password"
configuration.safe_chars_for_path_param = "/"

core_client = CoreApiClient(configuration)
{{ plugin_snake_short }}_client = {{ plugin_camel_short }}ApiClient(configuration)

# Create api clients for all resource types
artifacts = ArtifactsApi(core_client)
repositories = Repositories{{ plugin_camel_short }}Api({{ plugin_snake_short }}_client)
repoversions = Repositories{{ plugin_camel_short }}VersionsApi({{ plugin_snake_short }}_client)
{{ plugin_snake_short }}content = Content{{ plugin_camel_short }}Api({{ plugin_snake_short }}_client)
{{ plugin_snake_short }}distributions = Distributions{{ plugin_camel_short }}Api(core_client)
{{ plugin_snake_short }}publications = Publications{{ plugin_camel_short }}Api({{ plugin_snake_short }}_client)
{{ plugin_snake_short }}remotes = Remotes{{ plugin_camel_short }}Api({{ plugin_snake_short }}_client)
tasks = TasksApi(core_client)


# Create a {{ plugin_camel_short }} Remote
remote_url = "https://repos.fedorapeople.org/pulp/pulp/demo_repos/test_{{ plugin_snake_short }}_repo/"
remote_data = {{ plugin_camel_short }}{{ plugin_camel_short }}Remote(name="bar25", url=remote_url)
{{ plugin_snake_short }}_remote = {{ plugin_snake_short }}remotes.create(remote_data)
pprint({{ plugin_snake_short }}_remote)

# Create a Repository
repository_data = {{ plugin_camel_short }}{{ plugin_camel_short }}Repository(name="foo25")
repository = repositories.create(repository_data)
pprint(repository)

# Sync a Repository
repository_sync_data = RepositorySyncURL(remote={{ plugin_snake_short }}_remote.pulp_href)
sync_response = repositories.sync(repository.pulp_href, repository_sync_data)

pprint(sync_response)

# Monitor the sync task
created_resources = monitor_task(sync_response.task)

repository_version_1 = repoversions.read(created_resources[0])
pprint(repository_version_1)

# Create an artifact from a local file
file_path = os.path.join(os.environ['TRAVIS_BUILD_DIR'], '.travis/test_bindings.py')
artifact = artifacts.create(file=file_path)
pprint(artifact)

# TODO: Plugin writer action required: Provide information to create a {{ plugin_camel_short }}Content"
# Create a {{ plugin_camel_short }}Content from the artifact
{{ plugin_snake_short }}_data = {{ plugin_camel_short }}{{ plugin_camel_short }}Content(relative_path="foo.tar.gz", artifact=artifact.pulp_href)
{{ plugin_snake_short }}content = {{ plugin_snake_short }}content.create({{ plugin_snake_short }}_data)
pprint({{ plugin_snake_short }}content)

# Add the new {{ plugin_camel_short }}Content to a repository version
repo_version_data = {"add_content_units": [{{ plugin_snake_short }}content.pulp_href]}
repo_version_response = repoversions.create(repository.pulp_href, repo_version_data)

# Monitor the repo version creation task
created_resources = monitor_task(repo_version_response.task)

repository_version_2 = repoversions.read(created_resources[0])
pprint(repository_version_2)

# Create a publication from the latest version of the repository
publish_data = {{ plugin_camel_short }}{{ plugin_camel_short }}Publication(repository=repository.pulp_href)
publish_response = {{ plugin_snake_short }}publications.create(publish_data)

# Monitor the publish task
created_resources = monitor_task(publish_response.task)
publication_href = created_resources[0]

distribution_data = {{ plugin_camel_short }}{{ plugin_camel_short }}Distribution(
    name="baz25", base_path="foo25", publication=publication_href,
)
distribution = {{ plugin_snake_short }}distributions.create(distribution_data)
pprint(distribution)
